module bs.math

mutable struct Vec2
{
    static zero:Vec2 = ref Vec2.new(0.0f32, 0.0f32)
    static one:Vec2 = ref Vec2.new(1.0f32, 1.0f32)

    var x:float
    var y:float
    
    constructor(x:float, y:float)
    {
        this.x = x
        this.y = y
    }
    
    fun lengthSquared() => x * x + y * y
    fun length() => sqrt(lengthSquared())
    
    fun normalized() :> Vec2
    {
        var len = length()
        if (len == 0)
            return zero
                        
        return this / len
    }
}

implicit cast(vec:Vec2) :> string => "({vec.x}, {vec.y})"

operator(-vec:Vec2) :> Vec2 => Vec2.new(-vec.x, -vec.y)
operator(left:Vec2 + right:Vec2) :> Vec2 => Vec2.new(left.x + right.x, left.y + right.y)
operator(left:Vec2 - right:Vec2) :> Vec2 => Vec2.new(left.x - right.x, left.y - right.y)
operator(left:Vec2 * right:Vec2) :> Vec2 => Vec2.new(left.x * right.x, left.y * right.y)
operator(left:Vec2 / right:Vec2) :> Vec2 => Vec2.new(left.x / right.x, left.y / right.y)
operator(vec:Vec2 * scale:float) :> Vec2 => Vec2.new(vec.x * scale, vec.y * scale)
operator(scale:float * vec:Vec2) :> Vec2 => Vec2.new(scale * vec.x, scale * vec.y)
operator(vec:Vec2 / scale:float) :> Vec2 => Vec2.new(vec.x / scale, vec.y / scale)